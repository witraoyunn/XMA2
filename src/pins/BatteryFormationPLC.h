#ifndef BATTERYFORMATIONPLC_H#define BATTERYFORMATIONPLC_H#ifdef MITSUBISHI_PLC #include <thread>#include "ModbusTcpClient.h"#define Q03_D_REG_OFFSET		0			// D寄存器内存偏移地址#define Q03_M_REG_OFFSET		8192		// M寄存器内存偏移地址class BatteryFormationPLC {private:		enum WorkFlowStateMachine { 			// 业务流程状态枚举		WAIT_EVENT_MSG = 0, 				// 等待消息或事件		BF_START,							// 化成开始		WAIT_PALLET_SCAN_CODE,				// 等待托盘扫码完成		CHECK_PLC_RUN_MODE,				    // 检测PLC运行模式		WMS_READY_NOTIFY,				    // WMS准备就绪		WAIT_CELL_SCAN_CODE, 				// 等待电芯扫码完成		BOND_SINGLE_CELL_INFO, 				// 单个电芯绑定完成		BOND_ALL_CELL_INFO, 				// 整盘电芯绑定完成		WAIT_HOT_COMP_READY,				// 等待PLC热压准备就绪 		START_HOT_COMPRESSING,				// 启动热压 		WAIT_PRES_TEMP_READY,				// 等待PLC热压压力和温度达到条件 		WAIT_BF_HOT_COMP_COMPLETE,			// 等待PLC热压完成 		BF_HOT_COMP_EX,						// 化成热压异常 		WAIT_COLD_COMP_STARTING,			// 等待PLC启动冷压 		WAIT_COLD_COMP_COMPLETE,			// 等待PLC冷压结束 		WAIT_TAKE_OUT_READY,				// 等待化成下料准备就绪 		WMS_EMPTY_PEALLET_READY,			// WMS空托盘到达 		LAYING_OFF_CELL_SCAN_CODE,			// 下料电芯扫码		WAIT_LAYING_OFF_SCAN_CODE,			// 等待下料电芯扫码完成		BOND_SINGLE_CELL_SN, 				// 绑定单个电芯所在位置和SN号		BOND_ALL_CELL_SN_COMPLETE, 			// 下料所有电芯绑定完成		WMS_TAKE_OUT_PEALLET,				// WMS取走化成后的托盘 	};		public:	BatteryFormationPLC() {}    BatteryFormationPLC(int first_cell_no, int second_cell_no);    BatteryFormationPLC& operator= (const BatteryFormationPLC& obj);    std::thread run();private:	ModbusTcpClient *m_modbus_client;	bool             m_M900_905[6];			// R属性寄存器M900~905	bool             m_M910_915[6];			// R属性寄存器M910~915	bool             m_M920_921[2];			// R属性寄存器M920~923	uint16_t         m_D400_401[2];			// R属性寄存器D400~401	uint16_t         m_D404_405[2];			// R属性寄存器D404~405	uint16_t         m_D408_410[3];			// R属性寄存器D408~410	uint16_t         m_D413_430[18];		// R属性寄存器D413~430	    int  m_1th_cell_no;    int  m_2th_cell_no;	WorkFlowStateMachine m_1th_wfsm = WAIT_EVENT_MSG;	// 一库业务流程状态机	WorkFlowStateMachine m_2th_wfsm = WAIT_EVENT_MSG;	// 二库业务流程状态机	private:	void work();	bool read_MReg(int addr);	int  statusUpdate();	void messageHandle();	void workFlowHandle();	void alarmDetectHandle();};#endif#endif