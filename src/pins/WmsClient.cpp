#if 0#include "WmsClient.h"#include "Configuration.h"#include "MsgFactory.h"#include "FormatConvert.h"#include "log4z.h"#include "Type.h"using namespace std;WmsClient* WmsClient::instance(){    static WmsClient obj;    return &obj;}WmsClient::WmsClient(){	// 设置socket属性	// no ligner	int val = 0;	mClient.setsockopt(ZMQ_LINGER, &val, sizeof(val));	// receive and send timeout	val = 100;			// 100ms	mClient.setsockopt(ZMQ_RCVTIMEO, &val, sizeof(val));	val = 100;			// 100ms	mClient.setsockopt(ZMQ_SNDTIMEO, &val, sizeof(val));	// keepalive	val = 1;	mClient.setsockopt(ZMQ_TCP_KEEPALIVE, &val, sizeof(val));	val = 5;	mClient.setsockopt(ZMQ_TCP_KEEPALIVE_IDLE, &val, sizeof(val));	val = 2;	mClient.setsockopt(ZMQ_TCP_KEEPALIVE_INTVL, &val, sizeof(val));	val = 2;	mClient.setsockopt(ZMQ_TCP_KEEPALIVE_CNT, &val, sizeof(val));}WmsClient::~WmsClient(){	mClient.close();	mMonitor.abort();}thread WmsClient::run(){	return thread(&WmsClient::work, this);}void WmsClient::work(){	try	{		MsgFactory::instance()->create_wms_puber(Configuration::instance()->int_wms_puber_socket());		MsgFactory::instance()->create_wms_puller(Configuration::instance()->int_wms_pusher_socket());	}	catch (zmq::error_t &e)	{		LOGFMTE("Create ZMQ communication error. code: %d, description:%s", e.num(), e.what());		exit(-209);	}	// 监控socket事件    mMonitor.init(mClient, "inproc://monitor-client");		for (;;)	{		// 处理socket事件		check_event();				// 连接WMS服务端		if (!isConnected)		{			mClient.connect("tcp://" + Configuration::instance()->wms_ip() + ":" + std::to_string(WMS_SERVER_PORT));		}		// 接收并处理 WMS的消息		if (isConnected)		{			char buf[1024];			int res = mClient.recv(buf, sizeof(buf), ZMQ_DONTWAIT);			if (res > 0)			{				messageHandler(buf, res);			}		}		// 接收并处理 PLC推送给WMS的消息				CMD_WMS_DATA_STRUCT recv_data = CMD_WMS_DATA_STRUCT();				if (MsgFactory::instance()->wms_puller().recevie(recv_data, ZMQ_DONTWAIT))		{		}				msleep(100);	}}void WmsClient::messageHandler(char *msg, int size){}void WmsClient::notify(MessageType msg, int cell_no, bool status){	}#endif